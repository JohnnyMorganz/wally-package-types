name: Release

on:
  push:
    tags: ["*"]
  workflow_dispatch:

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

  release:
    needs: ["create-release"]
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: wally-package-types-win64
            cargo-target: x86_64-pc-windows-msvc
          - os: ubuntu-22.04
            artifact-name: wally-package-types-linux
            cargo-target: x86_64-unknown-linux-gnu
          - os: macos-latest
            artifact-name: wally-package-types-macos
            cargo-target: x86_64-apple-darwin
          - os: macos-latest
            artifact-name: wally-package-types-macos-aarch64
            cargo-target: aarch64-apple-darwin

    name: Build (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.cargo-target }}
          override: true
          profile: minimal

      - name: Build Binary (All features)
        run: cargo build --verbose --locked --release --all-features
        env:
          CARGO_TARGET_DIR: output

      - name: Setup Archive + Extension
        shell: bash
        run: |
          mkdir -p staging

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "output/release/wally-package-types.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "output/release/wally-package-types" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: release.zip

      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ matrix.artifact-name }}.zip
          asset_content_type: application/octet-stream

  release_cargo:
    name: Publish to cargo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Publish to cargo
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
